name: Build Packages

on:
  workflow_dispatch:
    inputs:
      pg_versions:
        description: 'PostgreSQL versions (comma-separated, e.g., "16,17,18")'
        required: false
        default: '16,17,18'
      create_release:
        description: 'Create GitHub release'
        required: false
        type: boolean
        default: false

env:
  PACKAGE_VERSION: '1.0.0'

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      pg_versions: ${{ steps.versions.outputs.pg_versions }}
    
    steps:
      - name: Determine version
        id: version
        run: echo "version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
      
      - name: Set PostgreSQL versions
        id: versions
        run: |
          if [ -n "${{ github.event.inputs.pg_versions }}" ]; then
            VERSIONS=$(echo "${{ github.event.inputs.pg_versions }}" | jq -Rc 'split(",") | map(gsub(" "; ""))')
          else
            VERSIONS='["16","17","18"]'
          fi
          echo "pg_versions=${VERSIONS}" >> $GITHUB_OUTPUT

  build-rpm:
    name: RPM
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        pg_version: ${{ fromJson(needs.prepare.outputs.pg_versions) }}
    uses: ./.github/workflows/reusable-build-rpm.yml
    with:
      pg_version: ${{ matrix.pg_version }}
      package_version: ${{ needs.prepare.outputs.version }}

  build-deb:
    name: DEB
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        pg_version: ${{ fromJson(needs.prepare.outputs.pg_versions) }}
    uses: ./.github/workflows/reusable-build-deb.yml
    with:
      pg_version: ${{ matrix.pg_version }}
      package_version: ${{ needs.prepare.outputs.version }}

  test:
    name: Test
    needs: [build-rpm, build-deb]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        type: [rpm, deb]
        pg_version: ['17']
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.type }}-pg${{ matrix.pg_version }}
          path: ./pkg
      
      - name: Test RPM
        if: matrix.type == 'rpm'
        run: |
          docker run --rm -v $PWD/pkg:/pkg rockylinux:9 bash -c '
            # Install PostgreSQL repository
            ARCH=$(uname -m) &&
            dnf install -y --nogpgcheck https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-${ARCH}/pgdg-redhat-repo-latest.noarch.rpm &&
            dnf -qy module disable postgresql &&
            dnf install -y --nogpgcheck postgresql${{ matrix.pg_version }}-server json-c &&
            # Install pgraft package
            dnf install -y --nogpgcheck /pkg/pgraft_${{ matrix.pg_version }}-*.rpm &&
            # Verify installation
            rpm -q pgraft_${{ matrix.pg_version }} &&
            ls -l /usr/pgsql-${{ matrix.pg_version }}/lib/pgraft*.so &&
            echo "✅ RPM test passed"
          '
      
      - name: Test DEB
        if: matrix.type == 'deb'
        run: |
          docker run --rm -v $PWD/pkg:/pkg ubuntu:22.04 bash -c '
            # Install PostgreSQL repository
            apt-get update &&
            apt-get install -y wget gnupg2 &&
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /usr/share/keyrings/postgresql.gpg &&
            echo "deb [signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list &&
            apt-get update &&
            # Install dependencies
            apt-get install -y postgresql-${{ matrix.pg_version }} libjson-c5 &&
            # Install pgraft package
            dpkg -i /pkg/*.deb &&
            # Verify installation
            dpkg -l | grep pgraft &&
            ls -l /usr/lib/postgresql/${{ matrix.pg_version }}/lib/pgraft*.so &&
            echo "✅ DEB test passed"
          '

  release:
    name: Release
    needs: [prepare, test]
    if: ${{ github.event.inputs.create_release == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Organize packages
        run: |
          mkdir -p release/{rpm,deb}
          find artifacts -name '*.rpm' -exec cp {} release/rpm/ \;
          find artifacts -name '*.deb' -exec cp {} release/deb/ \;
          cd release/rpm && sha256sum *.rpm > SHA256SUMS
          cd ../deb && sha256sum *.deb > SHA256SUMS
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: release/**/*
          body: |
            ## pgraft ${{ needs.prepare.outputs.version }}
            
            Raft consensus extension for PostgreSQL.
            
            ### Installation
            
            **RPM:** `sudo dnf install pgraft_17-*.rpm`  
            **DEB:** `sudo dpkg -i postgresql-17-pgraft_*.deb`
            
            **Enable:** `CREATE EXTENSION pgraft;`
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
