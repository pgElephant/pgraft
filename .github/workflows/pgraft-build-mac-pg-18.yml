name: pgraft-build-mac-pg-18

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ALL build dependencies for PostgreSQL
        run: |
          # Install all dependencies needed for PostgreSQL from source
          brew install \
            openssl@3 \
            readline \
            libxml2 \
            libxslt \
            zlib \
            ossp-uuid \
            perl \
            python@3.13
          
          # Verify critical dependencies
          echo "OpenSSL: $(brew --prefix openssl@3)"
          echo "Readline: $(brew --prefix readline)"
          ls -la $(brew --prefix openssl@3)/lib/libssl.dylib

      - name: Create installation directory with proper permissions
        run: |
          # Create /usr/local/pgsql.18 with proper ownership
          sudo mkdir -p /usr/local/pgsql.18
          sudo chown -R $(whoami):admin /usr/local/pgsql.18
          echo "Created /usr/local/pgsql.18 with ownership: $(ls -ld /usr/local/pgsql.18)"

      - name: Build PostgreSQL 18 from source
        run: |
          # Clone PostgreSQL 18
          git clone --branch REL_18_STABLE --depth 1 https://github.com/postgres/postgres.git /tmp/postgresql-18
          cd /tmp/postgresql-18
          
          # Configure with essential dependencies for pgraft testing
          # Note: Removed --with-tcl to avoid libtommath dependency issues
          ./configure \
            --prefix=/usr/local/pgsql.18 \
            --enable-debug \
            --with-includes=/opt/homebrew/opt/openssl@3/include \
            --with-libraries=/opt/homebrew/opt/openssl@3/lib \
            --with-openssl \
            --with-uuid=e2fs \
            --with-libxml \
            --with-libxslt \
            --with-perl \
            --with-python \
            --with-zlib \
            --without-icu
          
          # Build with all CPU cores
          make -j$(sysctl -n hw.ncpu)
          
          # Install (no sudo needed - we own the directory)
          make install
          
          # Verify installation
          /usr/local/pgsql.18/bin/pg_config --version
          
          # Set up environment
          echo "PG_PREFIX=/usr/local/pgsql.18" >> $GITHUB_ENV
          echo "PG_CONFIG=/usr/local/pgsql.18/bin/pg_config" >> $GITHUB_ENV
          
          echo "PostgreSQL 18 built and installed to /usr/local/pgsql.18"

      - name: Verify PostgreSQL installation
        run: |
          export PATH="${PG_PREFIX}/bin:$PATH"
          which pg_config
          pg_config --version

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up build environment
        run: |
          PG_INCLUDEDIR=$(${PG_CONFIG} --includedir)
          PG_INCLUDEDIR_SERVER=$(${PG_CONFIG} --includedir-server)
          PG_LIBDIR=$(${PG_CONFIG} --libdir)
          
          echo "CGO_CFLAGS=-I${PG_INCLUDEDIR} -I${PG_INCLUDEDIR_SERVER}" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L${PG_LIBDIR}" >> $GITHUB_ENV
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          echo "${PG_PREFIX}/bin" >> $GITHUB_PATH

      - name: Download Go dependencies
        run: |
          cd src
          go mod download
          go mod verify

      - name: Show Makefile being used
        run: |
          echo "Using Makefile.macos with PG_CONFIG=${PG_CONFIG}"
          head -20 Makefile.macos

      - name: Build pgraft
        run: |
          # Ensure correct PostgreSQL is in PATH
          export PATH="${PG_PREFIX}/bin:$PATH"
          
          # Verify we're using the right pg_config
          which pg_config
          pg_config --version
          
          # Use macOS-specific Makefile
          make -f Makefile.macos PG_CONFIG=${PG_CONFIG} clean || true
          make -f Makefile.macos PG_CONFIG=${PG_CONFIG} all 2>&1 | tee build.log

      - name: Verify build output
        run: |
          if [ -f pgraft.dylib ]; then
            echo "✓ Build successful: pgraft.dylib"
            ls -lh pgraft.dylib
          else
            echo "✗ Build failed"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pgraft-macos-pg18
          path: |
            pgraft.dylib
            src/pgraft_go.dylib
            pgraft.control
            pgraft--1.0.sql

