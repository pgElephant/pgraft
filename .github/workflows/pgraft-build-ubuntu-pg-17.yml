name: pgraft-build-ubuntu-pg-17

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            gcc \
            make \
            wget \
            gnupg \
            ca-certificates

      - name: Install PostgreSQL 17
        run: |
          echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y postgresql-17 postgresql-server-dev-17

      - name: Detect PostgreSQL paths
        run: |
          # Find pg_config
          PG_CONFIG=$(which pg_config || find /usr -name pg_config -path "*/17/*" | head -1)
          PG_BINDIR=$(dirname ${PG_CONFIG})
          PG_LIBDIR=$(${PG_CONFIG} --libdir)
          PG_PREFIX=$(dirname ${PG_BINDIR})
          
          echo "PG_CONFIG=${PG_CONFIG}" >> $GITHUB_ENV
          echo "PG_BINDIR=${PG_BINDIR}" >> $GITHUB_ENV
          echo "PG_LIBDIR=${PG_LIBDIR}" >> $GITHUB_ENV
          echo "PG_PREFIX=${PG_PREFIX}" >> $GITHUB_ENV
          
          echo "Detected PostgreSQL paths:"
          echo "  PG_CONFIG = ${PG_CONFIG}"
          echo "  PG_PREFIX = ${PG_PREFIX}"
          echo "  PG_BINDIR = ${PG_BINDIR}"
          echo "  PG_LIBDIR = ${PG_LIBDIR}"

      - name: Verify PostgreSQL installation
        run: |
          ${PG_CONFIG} --version
          ${PG_CONFIG} --includedir
          ${PG_CONFIG} --libdir

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up build environment
        run: |
          PG_INCLUDEDIR=$(${PG_CONFIG} --includedir)
          PG_INCLUDEDIR_SERVER=$(${PG_CONFIG} --includedir-server)
          
          echo "CGO_CFLAGS=-I${PG_INCLUDEDIR} -I${PG_INCLUDEDIR_SERVER} -I/usr/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L${PG_LIBDIR}" >> $GITHUB_ENV
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          echo "${PG_BINDIR}" >> $GITHUB_PATH

      - name: Download Go dependencies
        run: |
          cd src
          go mod download
          go mod verify

      - name: Patch Makefile for Ubuntu
        run: |
          cp Makefile Makefile.original
          
          # Replace hardcoded paths with detected paths
          sed -i "s|PG_CONFIG = /usr/local/pgsql.17/bin/pg_config|PG_CONFIG = ${PG_CONFIG}|g" Makefile
          sed -i "s|/usr/local/pgsql.17/lib|${PG_LIBDIR}|g" Makefile
          sed -i 's|pgraft_go.dylib|pgraft_go.so|g' Makefile
          
          echo "Detected paths:"
          echo "  PG_CONFIG = ${PG_CONFIG}"
          echo "  PG_LIBDIR = ${PG_LIBDIR}"
          echo ""
          echo "Makefile changes:"
          diff -u Makefile.original Makefile || true

      - name: Build pgraft
        run: |
          make clean || true
          make all 2>&1 | tee build.log

      - name: Verify build output
        run: |
          if [ -f pgraft.so ]; then
            echo "✓ Build successful: pgraft.so"
            ls -lh pgraft.so
            file pgraft.so
          else
            echo "✗ Build failed: pgraft.so not found"
            exit 1
          fi
          
          if [ -f src/pgraft_go.so ]; then
            echo "✓ Go library built: pgraft_go.so"
            ls -lh src/pgraft_go.so
          fi

      - name: Check for warnings
        run: |
          if grep -i "warning:" build.log; then
            echo "⚠ Warnings found in build"
          else
            echo "✓ No warnings"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pgraft-ubuntu-pg17
          path: |
            pgraft.so
            src/pgraft_go.so
            pgraft.control
            pgraft--1.0.sql

