/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
extern size_t _GoStringLen(_GoString_ s);
extern const char *_GoStringPtr(_GoString_ s);
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 14 "pgraft_go.go"



#include <stdlib.h>
#include <stdint.h>
#include <string.h>

// No external C callbacks - we'll use file-based IPC or shared memory

typedef struct pgraft_go_cluster_member {
	char   *name;
	char   *peer_host;
	int		peer_port;
} pgraft_go_cluster_member;

typedef struct pgraft_go_config {
	int		node_id;
	char   *cluster_id;
	char   *address;
	int		port;
	char   *data_dir;
	pgraft_go_cluster_member *cluster_members;
	int		cluster_member_count;
	int		initial_cluster_state;
	char   *name;
	char   *listen_peer_host;
	int		listen_peer_port;
	char   *listen_client_host;
	int		listen_client_port;
	char   *advertise_client_host;
	int		advertise_client_port;
	char   *initial_advertise_peer_host;
	int		initial_advertise_peer_port;
	int		election_timeout;
	int		heartbeat_interval;
	int		snapshot_interval;
	int		quota_backend_bytes;
	int		max_request_bytes;
	int		max_snapshots;
	int		max_wals;
	int		auto_compaction_retention;
	int		auto_compaction_mode;
	int		compaction_batch_limit;
	char   *log_level;
	char   *log_outputs;
	char   *log_package_levels;
	int		client_cert_auth;
	char   *trusted_ca_file;
	char   *cert_file;
	char   *key_file;
	char   *client_cert_file;
	char   *client_key_file;
	char   *peer_trusted_ca_file;
	char   *peer_cert_file;
	char   *peer_key_file;
	int		peer_client_cert_auth;
	char   *peer_cert_allowed_cn;
	int		peer_cert_allowed_hostname;
	char   *cipher_suites;
	char   *cors;
	char   *host_whitelist;
	char   *listen_metrics_urls;
	char   *metrics;
	int		experimental_initial_corrupt_check;
	char   *experimental_corrupt_check_time;
	char   *experimental_enable_v2v3;
	int		experimental_enable_lease_checkpoint;
	int		experimental_compaction_batch_limit;
	int		experimental_peer_skip_client_san_verification;
	int		experimental_self_signed_cert_validity;
	char   *experimental_watch_progress_notify_interval;
	int		max_log_entries;
	int		batch_size;
	int		max_batch_delay;
} pgraft_go_config;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#if !defined(__cplusplus) || _MSVC_LANG <= 201402L
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
#include <complex>
typedef std::complex<float> GoComplex64;
typedef std::complex<double> GoComplex128;
#endif
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// Set debug logging level
//
extern void pgraft_go_set_debug(int enabled);

// Set log output to a file
//
extern int pgraft_go_set_log_file(char* logFilePath);
extern int pgraft_go_start(void);
extern int pgraft_go_propose(char* data, size_t len);
extern int pgraft_go_stop(void);
extern int64_t pgraft_go_get_node_id(void);
extern char* pgraft_go_get_nodes(void);
extern void cleanup_pgraft(void);
extern char* pgraft_go_version(void);
extern int pgraft_go_test(void);
extern int pgraft_go_init_config(struct pgraft_go_config* config);

// Helper function to establish initial connections to all peers
// This should be called AFTER pgraft_go_start() from the background worker
//
extern int pgraft_go_connect_to_peers(void);
extern int pgraft_go_init(int nodeID, char* address, int port);
extern int pgraft_go_start_background(void);
extern int pgraft_go_add_peer(int nodeID, char* address, int port);
extern int pgraft_go_remove_peer(int nodeID);
extern char* pgraft_go_get_state(void);
extern int64_t pgraft_go_get_leader(void);
extern int32_t pgraft_go_get_term(void);
extern int pgraft_go_is_initialized(void);
extern int pgraft_go_is_leader(void);
extern int pgraft_go_append_log(char* data, int length);
extern char* pgraft_go_get_stats(void);
extern char* pgraft_go_get_logs(void);
extern int pgraft_go_commit_log(long index);
extern int pgraft_go_step_message(char* data, int length);
extern char* pgraft_go_get_network_status(void);
extern void pgraft_go_free_string(char* str);

// Main processing loop following etcd-io/raft patterns
// pgraft_go_tick is called by the PostgreSQL background worker on each iteration
// This is a non-blocking function that processes one tick of Raft work
//
extern int pgraft_go_tick(void);
extern int pgraft_go_replicate_log_entry(char* data, int dataLen);
extern char* pgraft_go_get_replication_status(void);
extern char* pgraft_go_create_snapshot(void);
extern int pgraft_go_apply_snapshot(char* snapshotData);
extern int pgraft_go_replicate_to_node(uint64_t nodeID, char* data, int dataLen);
extern double pgraft_go_get_replication_lag(void);
extern int pgraft_go_sync_replication(void);
extern int pgraft_go_update_cluster_state(long long leaderID, long long currentTerm, char* state);
extern int pgraft_go_start_network_server(int port);
extern int pgraft_go_trigger_heartbeat(void);
extern int pgraft_go_log_replicate(unsigned long long leaderID, unsigned long long fromIndex);

#ifdef __cplusplus
}
#endif
